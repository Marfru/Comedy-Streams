{"version":3,"sources":["img/logo.svg","Header.js","requests.js","Nav.js","VideoCard.js","axios.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Logo","alt","API_KEY","process","fetchTrending","fetchNetflixOriginals","fetchAmazonPrime","fetchTelecinco","fetchAtresplayer","fetchHbo","fetchCines","fetchProximamente","Nav","setSelectedOption","onClick","requests","VideoCard","forwardRef","ref","movie","backdrop_path","poster_path","line","element","truncateText","text","overview","title","original_name","media_type","release_date","first_air_date","vote_count","instance","axios","create","baseURL","Results","selectedOption","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,2RCY5BC,MARf,WACE,OACE,yBAAKC,UAAU,UACb,yBAAKC,IAAKC,IAAMC,IAAI,oBCPpBC,G,MAAO,UAAMC,qCAEJ,GACbC,cAAc,8BAAD,OAAgCF,EAAhC,kCACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,oDACrBI,iBAAiB,wBAAD,OAA0BJ,EAA1B,qDAChBK,eAAe,wBAAD,OAA0BL,EAA1B,mDACdM,iBAAiB,wBAAD,OAA0BN,EAA1B,qDAChBO,SAAS,wBAAD,OAA0BP,EAA1B,mDACRQ,WAAW,8BAAD,OAAgCR,EAAhC,kCACVS,kBAAkB,2BAAD,OAA6BT,EAA7B,mCCOJU,MAbf,YAAmC,IAArBC,EAAoB,EAApBA,kBACZ,OACE,yBAAKf,UAAU,OACb,wBAAIgB,QAAS,kBAAMD,EAAkBE,EAASX,iBAA9C,cACA,wBAAIU,QAAS,kBAAMD,EAAkBE,EAASV,yBAA9C,WACA,wBAAIS,QAAS,kBAAMD,EAAkBE,EAAST,oBAA9C,gBACA,wBAAIQ,QAAS,kBAAMD,EAAkBE,EAASN,YAA9C,OACA,wBAAIK,QAAS,kBAAMD,EAAkBE,EAASL,cAA9C,YACA,wBAAII,QAAS,kBAAMD,EAAkBE,EAASJ,qBAA9C,kB,wECcSK,EApBGC,sBAAW,WAAUC,GAAS,IAAjBC,EAAgB,EAAhBA,MAC7B,OACE,yBAAKD,IAAKA,EAAKpB,UAAU,aACvB,yBAAKC,IAAG,UALG,wCAKH,OAAgBoB,EAAMC,eAAiBD,EAAME,aAAepB,IAAI,gBACxE,kBAAC,IAAD,CACEqB,KAAM,EACNC,QAAQ,IACRC,aAAa,MACbC,KAAMN,EAAMO,WACd,4BAAKP,EAAMQ,OAASR,EAAMS,eAC1B,uBAAG9B,UAAU,oBACVqB,EAAMU,YAAN,UAAuBV,EAAMU,WAA7B,WACAV,EAAMW,cAAgBX,EAAMY,eAF/B,KAGE,kBAAC,IAAD,MAHF,IAGkB,IACfZ,EAAMa,gB,QCdAC,E,OAJEC,EAAMC,OAAO,CAC5BC,QAAS,iC,QC0BIC,MAvBf,YAAsC,IAAnBC,EAAkB,EAAlBA,eAAkB,EACPC,mBAAS,IADF,mBAC5BC,EAD4B,KACpBC,EADoB,KAYnC,OATAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBT,EAAMU,IAAIN,GADlC,cACQO,EADR,OAEEJ,EAAUI,EAAQC,KAAKC,SAFzB,kBAGSF,GAHT,4CADc,uBAAC,WAAD,wBAMdG,KACC,CAACV,IAGF,yBAAKxC,UAAU,WACb,kBAAC,IAAD,KACC0C,EAAOS,KAAI,SAAC9B,GAAD,OACT,kBAAC,EAAD,CAAW+B,IAAK/B,EAAMgC,GAAIhC,MAAOA,UCH3BiC,MAZf,WAAgB,IAAD,EAC6Bb,mBAASxB,EAASX,eAD/C,mBACRkC,EADQ,KACQzB,EADR,KAGb,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAKe,kBAAmBA,IACxB,kBAAC,EAAD,CAASyB,eAAgBA,MCFXe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17fc6575.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5e689300.svg\";","import React from 'react';\nimport './Header.css';\nimport Logo from './img/logo.svg';\n\nfunction Header() {\n  return (\n    <div className='header'>\n      <img src={Logo} alt='Comedias Logo' />\n    </div>\n  )\n}\n\nexport default Header\n","const API_KEY = `${process.env.REACT_APP_API_KEY}`;\n\nexport default {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&with_genres=35&language=es-ES`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213&with_genres=35&language=es-ES`,\n  fetchAmazonPrime: `/discover/tv?api_key=${API_KEY}&with_networks=1024&with_genres=35&language=es-ES`,\n  fetchTelecinco: `/discover/tv?api_key=${API_KEY}&with_networks=53&with_genres=35&language=es-ES`,\n  fetchAtresplayer: `/discover/tv?api_key=${API_KEY}&with_networks=3744&with_genres=35&language=es-ES`,\n  fetchHbo: `/discover/tv?api_key=${API_KEY}&with_networks=49&with_genres=35&language=es-ES`,\n  fetchCines: `/movie/now_playing?api_key=${API_KEY}&with_genres=35&language=es-ES`,\n  fetchProximamente: `/movie/upcoming?api_key=${API_KEY}&with_genres=35&language=es-ES`,\n}","import React from 'react';\nimport './Nav.css';\nimport requests from './requests';\n\nfunction Nav({setSelectedOption}) {\n  return (\n    <div className=\"nav\">\n      <h2 onClick={() => setSelectedOption(requests.fetchTrending)}>Tendencias</h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchNetflixOriginals)}>Netflix</h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchAmazonPrime)}>Amazon Prime</h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchHbo)}>HBO</h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchCines)}>En Cines</h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchProximamente)}>Proximamente</h2>\n    </div>\n  )\n}\n\nexport default Nav\n","import React, { forwardRef } from 'react';\nimport './VideoCard.css';\nimport TextTruncate from 'react-text-truncate';\nimport ThumUpSharp from '@material-ui/icons/ThumbUpSharp';\nconst base_url = 'https://image.tmdb.org/t/p/original/';\n\nconst VideoCard = forwardRef(({movie}, ref) => {\n  return (\n    <div ref={ref} className='videoCard'>\n      <img src={`${base_url}${movie.backdrop_path || movie.poster_path}`} alt='movie title' />\n      <TextTruncate\n        line={1}\n        element='p'\n        truncateText='...'\n        text={movie.overview} />\n      <h2>{movie.title || movie.original_name}</h2>\n      <p className='videoCard__stats'>\n        {movie.media_type && `${movie.media_type} ‚óè`}\n        {movie.release_date || movie.first_air_date} -\n        <ThumUpSharp/> {' '}\n        {movie.vote_count}\n      </p>\n    </div>\n  )\n})\n\nexport default VideoCard\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport default instance;","import React, { useState, useEffect } from 'react';\nimport './Results.css';\nimport VideoCard from './VideoCard';\nimport axios from './axios';\nimport FlipMove from 'react-flip-move';\n\nfunction Results({ selectedOption }) {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(selectedOption);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData()\n  }, [selectedOption])\n\n  return (\n    <div className=\"results\">\n      <FlipMove>\n      {movies.map((movie) => (\n         <VideoCard key={movie.id} movie={movie}/>\n      ))}\n      </FlipMove>\n    </div>\n  )\n}\n\nexport default Results\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Nav from './Nav';\nimport Results from './Results';\nimport requests from './requests';\n\nfunction App() {\nconst [selectedOption, setSelectedOption] = useState(requests.fetchTrending);\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <Nav setSelectedOption={setSelectedOption} />\n      <Results selectedOption={selectedOption} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}